from flask import Flask,render_template,flash,redirect,url_for,session,request
import sh
import feedparser
from datetime import datetime, timedelta
import re
import time
from nmap import *
from sqli import *
import json


app = Flask(__name__)
app.secret_key = 'secret'
CLEANR = re.compile('<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

dorks = {"1":"ext:doc | ext:docx | ext:odt | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv", "2": "intitle:index.of", "3": "ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | ext:ora | ext:ini | ext:env", "4":"ext:sql | ext:dbf | ext:mdb", "5":"ext:log", "6":"ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup", "7":'inurl:login | inurl:signin | intitle:Login | intitle:"sign in" | inurl:auth', "8":'intext:"sql syntax near" | intext:"syntax error has occurred" | intext:"incorrect syntax near" | intext:"unexpected end of SQL command" | intext:"Warning: mysql_connect()" | intext:"Warning: mysql_query()" | intext:"Warning: pg_connect()"', "9":'"PHP Parse error" | "PHP Warning" | "PHP Error"', "10":'ext:php intitle:phpinfo "published by the PHP Group"', "11":"site:pastebin.com | site:paste2.org | site:pastehtml.com | site:slexy.org | site:snipplr.com | site:snipt.net | site:textsnip.com | site:bitpaste.app | site:justpaste.it | site:heypasteit.com | site:hastebin.com | site:dpaste.org | site:dpaste.com | site:codepad.org | site:jsitor.com | site:codepen.io | site:jsfiddle.net | site:dotnetfiddle.net | site:phpfiddle.org | site:ide.geeksforgeeks.org | site:repl.it | site:ideone.com | site:paste.debian.net | site:paste.org | site:paste.org.ru | site:codebeautify.org  | site:codeshare.io | site:trello.com", "12":"site:github.com | site:gitlab.com", "13":"site:stackoverflow.com", "14":"inurl:signup | inurl:register | intitle:Signup", "15":"site:*.", "16":"site:*.*.", "17":"web.archive.org/web/*/", "18":") (site:*.*.29.* |site:*.*.28.* |site:*.*.27.* |site:*.*.26.* |site:*.*.25.* |site:*.*.24.* |site:*.*.23.* |site:*.*.22.* |site:*.*.21.* |site:*.*.20.* |site:*.*.19.* |site:*.*.18.* |site:*.*.17.* |site:*.*.16.* |site:*.*.15.* |site:*.*.14.* |site:*.*.13.* |site:*.*.12.* |site:*.*.11.* |site:*.*.10.* |site:*.*.9.* |site:*.*.8.* |site:*.*.7.* |site:*.*.6.* |site:*.*.5.* |site:*.*.4.* |site:*.*.3.* |site:*.*.2.* |site:*.*.1.* |site:*.*.0.*)"}

host = "https://www.google.com/search?q="

def fetch_data(url):
    feed = feedparser.parse(url)
    entries = []
    news = []

    # Define the time range (e.g., the last 24 hours)
    now = datetime.now()
    time_range = timedelta(days=1)
    # Iterate through entries and filter by the time range
    for entry in feed.entries:
        entry_date = datetime.strptime(entry.published, "%a, %d %b %Y %H:%M:%S %z").replace(tzinfo=None)
        if now - entry_date <= time_range:
            news.append(dict(title = entry.title, link = entry.link, date = entry.published, content = cleanhtml(entry.summary)))     
    return news
    
def fetch_json():
	f = open('output.json')
	
	data = json.load(f)
	
	return data
		
		

def fetch_domains(url):
    feed = feedparser.parse(url)
    entries = []
    domains = []
    for entry in feed.entries:
        entries.append(cleanhtml(entry.summary)[:cleanhtml(entry.summary).find("-----")].split("\n"))
    
    for entry in entries:
       for domain in entry:
            if domain not in domains and domain.count('.') == 1:
                domains.append(domain)
    return domains

def is_domain(domain):
    pattern = re.compile(r"^[a-zA-Z0-9-]+\.[a-zA-Z]{2,6}$")
    return pattern.match(domain) is not None
    
def is_url(url):
	if "http" in url:
		return True
	return False	

def cleanhtml(raw_html):
    cleantext = re.sub(CLEANR, '', raw_html)
    return cleantext
    
def calculateTime():
	global r_time
	global f_time
	global s_time
	r_time = f_time - s_time
	s_time = s_time.strftime('%x') + ' ' + s_time.strftime('%X')
	f_time = f_time.strftime('%x') + ' ' + f_time.strftime('%X')
	r_time = divmod(r_time.seconds, 60)


@app.route('/', methods = ["GET", "POST"])
def index():
    return render_template("index.html")
    
    
@app.route('/df-result', methods = ["GET", "POST"])
def df_result():
    calculateTime()
    flash("Scanning Completed Successfully :D","success")
    return render_template("df_result.html", f_time = f_time, s_time = s_time, r_time = r_time, domain = domain, domains = domains, number= len(domains))

@app.route('/domain-finder', methods = ["GET", "POST"])
def domain_finder():
    if request.method == "POST":
        global domain
        domain = request.form['domain']
        validate = is_domain(domain)
        if not validate:
            flash("Invalid Domain :(","danger")
            return redirect(url_for("domain_finder"))
        global s_time
        global domains
        global f_time
        s_time = datetime.now()
        domains = fetch_domains(f"https://crt.sh/atom?q={domain}")
        f_time = datetime.now()
        return redirect(url_for("df_result"))
    return render_template("domain_finder.html")

@app.route('/subdomain-finder', methods = ["GET", "POST"])
def subdomain_finder():
    if request.method == "POST":
        global domain
        domain = request.form ['domain']
        validate = is_domain(domain)
        if not validate:
            flash("Invalid Domain :(","danger")
            return redirect(url_for("subdomain_finder"))
        global s_time
        global f_time
        global subdomains
        s_time = datetime.now()
        with open("bash.sh", "w+") as f:
            fr = f.readlines() 
            fr.insert(3, f"#!/bin/bash\n\nsublist3r -d {domain} -t 3 -o output\n")
            f.seek(0)
            f.writelines(fr)           
        run = sh.Command("./bash.sh")
        run()
        with open("output", "r+") as file1:
    	    subdomains=file1.readlines()
        f_time = datetime.now()
        return redirect(url_for("sf_result"))
    return render_template("subdomain_finder.html")

@app.route('/sf-result', methods = ["GET", "POST"])
def sf_result():
    calculateTime()
    flash("Scanning Completed Successfully :D","success")
    return render_template("sf_result.html", f_time = f_time, s_time = s_time, r_time = r_time, domain = domain, subdomains = subdomains, number= len(subdomains))
    
@app.route('/google-hacking', methods = ["GET", "POST"])
def google_hacking():
    if request.method == "POST":
        domain = request.form['domain']
        parameter = request.form['parameter']
        if parameter == "1":
            result = f"{host}site:{domain} {dorks['1']}"
        elif parameter == "2":
            result = f"{host}site:{domain} {dorks['2']}"
        elif parameter == "3":
            result = f"{host}site:{domain} {dorks['3']}"
        elif parameter == "4":
            result = f"{host}site:{domain} {dorks['4']}"
        elif parameter == "5":
            result = f"{host}site:{domain} {dorks['5']}"
        elif parameter == "6":
            result = f"{host}site:{domain} {dorks['6']}"
        elif parameter == "7":
            result = f'{host}site:{domain} {dorks["7"]}'
        elif parameter == "8":
            result = f'{host}site:{domain} {dorks["8"]}'
        elif parameter == "9":
            result = f'{host}site:{domain} {dorks["9"]}'
        elif parameter == "10":
            result = f'{host}site:{domain} {dorks["10"]}'
        elif parameter == "11":
            result = f'{host}"{domain}" {dorks["11"]}'
        elif parameter == "12":
            result = f'{host}"{domain}" {dorks["12"]}'
        elif parameter == "13":
            result = f'{host}"{domain}" {dorks["13"]}'
        elif parameter == "14":
            result = f"{host}site:{domain} {dorks['14']}"
        elif parameter == "15":
            result = f"{host}{dorks['15']}{domain}"
        elif parameter == "16":
            result = f"{host}{dorks['16']}{domain}"
        elif parameter == "17":
            result = f"https://{dorks['17']}{domain}/*"
        elif parameter == "18":
            result = f"{host}({domain}{dorks['18']}"    
        else:
            return render_template("google_hacking.html", result="Try Again")
        
        return redirect(result)

    return render_template("google_hacking.html")

@app.route('/news', methods = ["GET","POST"])
def news_scan():
    url = "https://feeds.feedburner.com/TheHackersNews"
    news = fetch_data(url)
    return render_template("news_scanner.html", result = news)

@app.route('/nmap-scan', methods = ["GET","POST"])
def nmap_scan():
    if request.method == "POST":
        global domain
        global p_type
        global s_type
        global s_time
        global f_time

        domain = request.form['domain']
        parameter = request.form['parameter']
        speed = request.form['speed']
        
        s_time = datetime.now()
        
        if parameter == "1":
            parameter = "-sS -Pn"
            p_type = "SYN Scan"
        elif parameter == "2":
            parameter = "-sT -Pn"
            p_type = "TCP Connect Scan"
        elif parameter == "6":
            parameter = "-sO"
            p_type = "IP Protocol Scan"
        elif parameter == "7":
            parameter = "-sU -Pn"
            p_type = "UDP Scan"
        elif parameter == "8":
            parameter = "-sV"
            p_type = "Version Scan"
        elif parameter == "9":
            parameter = "-O -n"
            p_type = "OS Scan"
        elif parameter == "10":
            parameter = "-sC -v"
            p_type = "NSE (Nmap Script Engine)"
        else:
            flash("Invalid Parameter :(","danger")
            return redirect(url_for("nmap_scan"))
        
        if speed == "1":
            speed = "-T1"
            s_type = "Very Slow"
        elif speed == "2":
            speed = "-T2"
            s_type = "Slow"
        elif speed == "3":
            speed = "-T3"
            s_type = "Medium"
        elif speed == "4":
            speed = "-T4"
            s_type = "High"
        elif speed == "5":
            speed = "-T5"
            s_type = "Very High"
        else:
            flash("Invalid Parameter :(","danger")
            return redirect(url_for("nmap_scan"))

        with open("bash.sh", "w+") as f:
            fr = f.readlines() 
            fr.insert(3, f"#!/bin/bash\n\nnmap {parameter} {speed} -oX out.xml {domain}\n")
            f.seek(0)
            f.writelines(fr)           
        run = sh.Command("./bash.sh")
        global result
        result = run()
        f_time = datetime.now()
        return redirect(url_for("nmap_result"))
    return render_template("nmap_scanner.html")    

@app.route('/nmap-result', methods = ["GET", "POST"])
def nmap_result():
    calculateTime()
    infos = parseNmap(p_type)
    flash("Scanning Completed Successfully :D","success")
    return render_template("nmap_result.html", f_time = f_time, s_time = s_time, r_time = r_time, domain = domain, ips = infos['ip_address'], h_numbers = infos['host_number'], p_numbers = infos['port_number'], ports = infos['ports'], parameter = p_type, speed = s_type, hosts = infos['hostname'], oss = infos['os'])

@app.route('/waf-detection', methods = ["GET", "POST"])
def waf_detection():
    if request.method == "POST":
        global domain
        domain = request.form ['domain']
        
        validate = is_url(domain)
        if not validate:
            flash("Invalid URL :(","danger")
            return redirect(url_for("waf_detection"))
            
        global s_time
        global f_time
        s_time = datetime.now()
        with open("bash.sh", "w+") as f:
            fr = f.readlines() 
            fr.insert(3, f"#!/bin/bash\n\nwafw00f {domain} -o output.json\n")
            f.seek(0)
            f.writelines(fr)           
        run = sh.Command("./bash.sh")
        run()
        
        f_time = datetime.now()
        return redirect(url_for("waf_result"))
    return render_template("waf_detection.html")

@app.route('/waf-result', methods = ["GET", "POST"])
def waf_result():
    calculateTime()
    data = fetch_json()
    
    if len(data) == 0 or not data[0]['detected']:
        data = {'url': domain, 'detected': "Not Detected", 'firewall': '', 'manufacturer': ''}
    else:
	    for i in data:
		    data = i
		    data['detected'] = 'Detected'
    
    flash("Scanning Completed Successfully :D","success")
    return render_template("waf_result.html", f_time = f_time, s_time = s_time, r_time = r_time, url = data['url'], isDetect = data['detected'], firewall = data['firewall'], company = data['manufacturer'])
    
@app.route('/sqli-detection', methods = ["GET", "POST"])
def sqli_detection():
    if request.method == "POST":
        global domain
        domain = request.form ['domain']
        
        validate = is_url(domain)
        if not validate:
            flash("Invalid URL :(","danger")
            return redirect(url_for("sqli_detection"))
            
        global s_time
        global f_time
        s_time = datetime.now()
        
        global isvulnerable
        isvulnerable = sql(domain, 'output.txt')
        
        f_time = datetime.now()
        return redirect(url_for("sqli_result"))
    return render_template("sqli.html")

@app.route('/sqli-result', methods = ["GET", "POST"])
def sqli_result():
    calculateTime()
    
    if isvulnerable == True:
        data = {'url': domain, 'detected': "Detected"}
    else:
	    data = {'url': domain, 'detected': "Not Detected"}
    
    flash("Scanning Completed Successfully :D","success")
    return render_template("sqli_result.html", f_time = f_time, s_time = s_time, r_time = r_time, url = data['url'], isDetect = data['detected'])
    
@app.route('/xss-detection', methods = ["GET", "POST"])
def xss_detection():
    if request.method == "POST":
        global domain
        domain = request.form ['domain']
        
        validate = is_url(domain)
        if not validate:
            flash("Invalid URL :(","danger")
            return redirect(url_for("xss_detection"))
            
        global s_time
        global f_time
        s_time = datetime.now()
        
        global isvulnerable
        isvulnerable = xss(domain, 'output.txt')
        
        f_time = datetime.now()
        return redirect(url_for("xss_result"))
    return render_template("xss.html")

@app.route('/xss-result', methods = ["GET", "POST"])
def xss_result():
    calculateTime()
    
    if isvulnerable == True:
        data = {'url': domain, 'detected': "Detected"}
    else:
	    data = {'url': domain, 'detected': "Not Detected"}
    
    flash("Scanning Completed Successfully :D","success")
    return render_template("xss_result.html", f_time = f_time, s_time = s_time, r_time = r_time, url = data['url'], isDetect = data['detected'])

@app.errorhandler(404)
def not_found(e):
    return render_template('404.html')

if __name__ == '__main__':
    app.run(debug=True)
    

